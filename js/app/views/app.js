// Generated by CoffeeScript 1.6.2
(function() {
  var app;

  app = window.app;

  app.View.App = Backbone.View.extend({
    Forms: {
      Folder: {
        $el: $('#form-add-folder'),
        $title: $('#new-folder-title')
      },
      Note: {
        $el: $('#form-add-note'),
        form: document.note_form,
        $newButton: $('#new-note')
      }
    },
    $searchField: $('#search'),
    Templates: {
      noteForm: app.Template.Note.noteForm
    },
    initialize: function() {
      this.addFolder = _.bind(this.addFolder, this);
      this.addNote = _.bind(this.addNote, this);
      this.focusFolderTitle = _.bind(this.focusFolderTitle, this);
      this.focusNoteTitle = _.bind(this.focusNoteTitle, this);
      this.renderNoteForm = _.bind(this.renderNoteForm, this);
      this.doSearch = _.bind(this.doSearch, this);
      this.clearFolder = _.bind(this.clearFolder, this);
      this.Forms.Folder.$el.on('hidden', this.clearFolder).on('shown', this.focusFolderTitle).on('click', '.add-folder', this.addFolder);
      this.Forms.Folder.$title.on('keyup', this.addFolder);
      this.Forms.Note.$el.on('shown', this.focusNoteTitle).on('click', '.add-note', this.addNote);
      this.Forms.Note.$newButton.on('click', this.renderNoteForm);
      this.Forms.Note.form.onsubmit = function(event) {
        return event.preventDefault();
      };
      return this.$searchField.on('keyup', this.doSearch);
    },
    addFolder: function(event) {
      var folder;

      if (event.type === 'keyup' && event.which !== 13) {
        return;
      }
      folder = new app.Model.Folder({
        title: this.Forms.Folder.$title.val()
      });
      app.Collection.Folders.add(folder);
      folder.save();
      return this.Forms.Folder.$el.modal('hide');
    },
    focusFolderTitle: function() {
      return this.Forms.Folder.$title.focus();
    },
    clearFolder: function() {
      return this.Forms.Folder.$title.val('');
    },
    addNote: function() {
      var form, note;

      form = this.Forms.Note.form;
      note = new app.Model.Note({
        title: form.title.value,
        body: form.body.value,
        folder_id: form.folder.value
      });
      app.Collection.Notes.add(note);
      note.save();
      return this.Forms.Note.$el.modal('hide');
    },
    focusNoteTitle: function() {
      return this.Forms.Note.form.title.focus();
    },
    renderNoteForm: function() {
      return this.Forms.Note.form.innerHTML = this.Templates.noteForm({
        title: '',
        body: '',
        folders: app.Collection.Folders.toJSON(),
        folder_id: -1,
        id: false
      });
    },
    doSearch: function() {
      var note, searchedNotes, value, _i, _len, _results;

      value = this.$searchField.val();
      app.Router.navigate('search', {
        trigger: true
      });
      if (value === '') {
        app.AppEvent.trigger('show:notes');
      } else {
        app.AppEvent.trigger('hide:notes');
        searchedNotes = app.Collection.Notes.filter(function(note) {
          return !!note.get('title').match(value || !!note.get('body').match(value));
        });
        _results = [];
        for (_i = 0, _len = searchedNotes.length; _i < _len; _i++) {
          note = searchedNotes[_i];
          _results.push(note.view.show());
        }
        return _results;
      }
    }
  });

}).call(this);
