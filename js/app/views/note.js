// Generated by CoffeeScript 1.6.2
(function() {
  var app;

  app = window.app;

  app.View.Note = Backbone.View.extend({
    className: 'row-fluid',
    events: {
      'click .edit': 'renderForm',
      'click .delete': 'renderConfirmForm'
    },
    $notesWrapper: $('#notes'),
    $noteForm: $('#form-add-note'),
    $confirmModalForm: $('#form-note-confirm'),
    form: document.note_form,
    Templates: {
      noteItem: app.Template.Note.noteItem,
      noteForm: app.Template.Note.noteForm,
      noteConfirmForm: app.Template.Note.confirmForm
    },
    initialize: function() {
      this.save = _.bind(this.save, this);
      this.destroy = _.bind(this.destroy, this);
      this.model.view = this;
      this.render().$el.appendTo(this.$notesWrapper);
      this.$noteForm.on('click', '.save-note', this.save);
      this.$confirmModalForm.on('click', '.delete', this.destroy);
      return this.listenEvents();
    },
    listenEvents: function() {
      this.listenTo(this.model, 'change:title change:body', this.render);
      this.listenTo(this.model, 'remove', this.remove);
      return this;
    },
    destroy: function(event) {
      if (+event.target.dataset.id !== +this.model.id) {
        return;
      }
      this.model.collection.remove(this.model);
      return this.$confirmModalForm.modal('hide');
    },
    renderForm: function() {
      return this.form.innerHTML = this.Templates.noteForm(_.extend({}, this.model.toJSON(), {
        folders: app.Collection.Folders.toJSON()
      }));
    },
    renderConfirmForm: function() {
      return this.$confirmModalForm.html(this.Templates.noteConfirmForm(this.model.toJSON()));
    },
    save: function(event) {
      if (+event.target.dataset.id !== +this.model.id) {
        return;
      }
      this.model.save({
        title: this.form.title.value,
        body: this.form.body.value,
        folder_id: this.form.folder.value
      });
      return this.$noteForm.modal('hide');
    },
    render: function() {
      this.$el.html(this.Templates.noteItem(this.model.toJSON()));
      return this;
    }
  });

}).call(this);
