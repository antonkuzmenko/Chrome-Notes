// Generated by CoffeeScript 1.6.2
(function() {
  var Notes, app,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = window.app;

  Notes = Backbone.Collection.extend({
    model: app.Model.Note,
    type: 'note',
    initialize: function() {
      this.on('sync', function(model, resp) {
        if ((resp != null) && (resp.length != null)) {
          return app.Iterator.note.set(_.max(resp, function(note) {
            return note.id;
          }).id);
        }
      });
      return this.fetch();
    },
    bulkRemove: function(notesToDelete) {
      var id, modelId, note, noteIdsToDelete, storage, _i, _j, _len, _len1;

      storage = chrome.storage.local;
      noteIdsToDelete = _.pluck(notesToDelete, 'id');
      for (_i = 0, _len = noteIdsToDelete.length; _i < _len; _i++) {
        id = noteIdsToDelete[_i];
        modelId = "" + this.type + "-" + id;
        storage.remove(modelId);
      }
      for (_j = 0, _len1 = notesToDelete.length; _j < _len1; _j++) {
        note = notesToDelete[_j];
        note.trigger('remove');
      }
      return storage.get(this.type, function(ids) {
        ids['note'] = _.filter(ids['note'], function(id) {
          return __indexOf.call(noteIdsToDelete, id) < 0;
        });
        return storage.set(ids);
      });
    }
  });

  app.Collection.Notes = new Notes;

}).call(this);
