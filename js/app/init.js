// Generated by CoffeeScript 1.6.2
(function() {
  var iterator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.app = {
    Model: {},
    Collection: {},
    View: {},
    Mixin: {},
    Iterator: {},
    Template: {
      Folder: {},
      Note: {}
    }
  };

  iterator = (function() {
    return function() {
      var i;

      i = 0;
      return {
        next: function() {
          return ++i;
        },
        get: function() {
          return i;
        },
        set: function(newI) {
          return i = newI;
        }
      };
    };
  })();

  window.app.Iterator.folder = iterator();

  window.app.Iterator.note = iterator();

  Backbone.Model.prototype.toJSON = function() {
    var _ref;

    return _.extend({}, _.clone(this.attributes), {
      id: (_ref = this.id) != null ? _ref : this.cid
    });
  };

  Backbone.sync = function(method, model, options) {
    var data, modelId, storage, _ref;

    modelId = "" + model.type + "-" + model.id;
    storage = chrome.storage.local;
    switch (method) {
      case 'create':
      case 'update':
      case 'patch':
        data = {};
        data[modelId] = (_ref = options.attrs) != null ? _ref : model.toJSON(options);
        storage.set(data, function() {
          var errorMsg, _ref1;

          errorMsg = (_ref1 = chrome.runtime.lastError) != null ? _ref1.message : void 0;
          if (errorMsg != null) {
            return options.error(errorMsg);
          } else {
            options.success(data);
            return storage.get(model.type, function(identifiers) {
              var ids;

              if (identifiers[model.type] == null) {
                identifiers[model.type] = [];
              }
              ids = identifiers[model.type];
              if (__indexOf.call(ids, modelId) < 0) {
                ids.push(modelId);
                return storage.set(identifiers);
              }
            });
          }
        });
        break;
      case 'delete':
        storage.remove(modelId, function() {
          var errorMsg, _ref1;

          errorMsg = (_ref1 = chrome.runtime.lastError) != null ? _ref1.message : void 0;
          if (errorMsg != null) {
            return options.error(errorMsg);
          } else {
            options.success('ok');
            return storage.get(model.type, function(identifiers) {
              var deletedIndex, ids;

              ids = identifiers[model.type];
              deletedIndex = ids.indexOf(modelId);
              if (deletedIndex !== -1) {
                ids.splice(deletedIndex, 1);
                return storage.set(identifiers);
              }
            });
          }
        });
        break;
      case 'read':
        storage.get(modelId, function(data) {
          var errorMsg, _ref1;

          errorMsg = (_ref1 = chrome.runtime.lastError) != null ? _ref1.message : void 0;
          if (errorMsg != null) {
            return options.error(errorMsg);
          } else {
            return options.success(data);
          }
        });
    }
    model.trigger('request', model, {}, options);
    return null;
  };

  Backbone.Model.prototype.parse = function(resp, options) {
    return resp[this.type + '-' + this.id];
  };

}).call(this);
